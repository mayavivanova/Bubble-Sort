function quickSort(arr) {
	if (arr.length <= 1) { 
		return arr;
	} else {

		var left = [];
		var right = [];
		var newArr = [];
		var pivot = arr.pop();
		var length = arr.length;

		for (var i = 0; i < length; i++) {
			if (arr[i] <= pivot) {
				left.push(arr[i]);
			} else {
				right.push(arr[i]);
			}
		}

		return newArr.concat(quickSort(left), pivot, quickSort(right));
	}
}

quickSort([3, 0, 2, 5, -1, 4, 1 ]);


--------------------------------------------


function insertionSort(arr) {
  for (let i = 1; i < arr.length; i++) {
    if(arr[i] < arr[0]) arr.unshift(arr.splice(i, 1)[0]);
    else if (arr[i] > arr[i-1]) continue;
    else {
      for(let j = 1; j < i; j++) {
        if(arr[i] > arr[j-1] && arr[i] < arr[j]) arr.splice(j, 0, arr.splice(i, 1)[0]);
      }
    }
  }
  return arr;
}

insertionSort([ 4, 1, 5, 3, 7, 2, 0])



-----------------------------


function selectionSort(arr) {
  let length = arr.length;

  for(let i = 0; i < length - 1; i ++) {

    for(let j = i + 1; j < length; j++) {
      if(arr[j] < arr[i]) {
      [arr[i], arr[j]] = [arr[j], arr[i]]; 
      }
    }
  }
  return arr;
}

selectionSort([1, 4, 5, 3, 7, 2, 0])


-------------------------------



function mergeSort(arr) {
  if(arr.length === 1) return arr;

  let middle = Math.floor(arr.length / 2);

  let left = arr.slice(0, middle);
  let right = arr.slice(middle);

  return merge(mergeSort(left), mergeSort(right));
}

function merge(left, right) {
  let i = 0; 
  let j = 0;
  let results = [];

  while(i < left.length || j < right.length) {
    if(i === left.length) {
      results.push(right[j]);
      j++;
    } else if (j === right.length || left[i] <= right[j]) {
      results.push(left[i]);
      i++
    } else {
      results.push(right[j]);
      j++;
    }
  }

  return results.concat(left.slice(i), right.slice(j));

  
  console.log(left);
  console.log(right);
}

mergeSort([1, 4, 5, 3, 7, 2, 0])
